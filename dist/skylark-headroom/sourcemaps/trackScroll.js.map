{"version":3,"sources":["trackScroll.js"],"names":["define","features","createScroller","passiveEventsSupported","element","options","callback","rafId","isPassiveSupported","scrolled","scroller","lastScrollY","scrollY","details","update","Math","round","height","scrollHeight","direction","distance","abs","isOutOfBounds","top","offset","bottom","toleranceExceeded","tolerance","handleScroll","requestAnimationFrame","eventOptions","passive","capture","addEventListener","destroy","cancelAnimationFrame","removeEventListener"],"mappings":";;;;;;;AAAAA,QACE,aACA,cACA,SAASC,EAASC,GAElB,IAAKC,EAAyBF,EAASE,uBAyDvC,OApDA,SAAqBC,EAASC,EAASC,GACrC,IACIC,EADAC,EAAqBL,IAErBM,GAAW,EACXC,EAAWR,EAAeE,GAC1BO,EAAcD,EAASE,UACvBC,KAEJ,SAASC,IACP,IAAIF,EAAUG,KAAKC,MAAMN,EAASE,WAC9BK,EAASP,EAASO,SAClBC,EAAeR,EAASQ,eAG5BL,EAAQD,QAAUA,EAClBC,EAAQF,YAAcA,EACtBE,EAAQM,UAAYP,EAAUD,EAAc,OAAS,KACrDE,EAAQO,SAAWL,KAAKM,IAAIT,EAAUD,GACtCE,EAAQS,cAAgBV,EAAU,GAAKA,EAAUK,EAASC,EAC1DL,EAAQU,IAAMX,GAAWP,EAAQmB,OACjCX,EAAQY,OAASb,EAAUK,GAAUC,EACrCL,EAAQa,kBACNb,EAAQO,SAAWf,EAAQsB,UAAUd,EAAQM,WAE/Cb,EAASO,GAETF,EAAcC,EACdH,GAAW,EAGb,SAASmB,IACFnB,IACHA,GAAW,EACXF,EAAQsB,sBAAsBf,IAIlC,IAAIgB,IAAetB,IACbuB,SAAS,EAAMC,SAAS,GAM9B,OAHA5B,EAAQ6B,iBAAiB,SAAUL,EAAcE,GACjDhB,KAGEoB,QAAS,WACPC,qBAAqB5B,GACrBH,EAAQgC,oBAAoB,SAAUR,EAAcE","file":"../trackScroll.js","sourcesContent":["define([\n  \"./features\",\n  \"./scroller\"\n],function(features,createScroller){\n\n  var  passiveEventsSupported = features.passiveEventsSupported;\n\n  /**\n   * @param element EventTarget\n   */\n  function trackScroll(element, options, callback) {\n    var isPassiveSupported = passiveEventsSupported();\n    var rafId;\n    var scrolled = false;\n    var scroller = createScroller(element);\n    var lastScrollY = scroller.scrollY();\n    var details = {};\n\n    function update() {\n      var scrollY = Math.round(scroller.scrollY());\n      var height = scroller.height();\n      var scrollHeight = scroller.scrollHeight();\n\n      // reuse object for less memory churn\n      details.scrollY = scrollY;\n      details.lastScrollY = lastScrollY;\n      details.direction = scrollY > lastScrollY ? \"down\" : \"up\";\n      details.distance = Math.abs(scrollY - lastScrollY);\n      details.isOutOfBounds = scrollY < 0 || scrollY + height > scrollHeight;\n      details.top = scrollY <= options.offset;\n      details.bottom = scrollY + height >= scrollHeight;\n      details.toleranceExceeded =\n        details.distance > options.tolerance[details.direction];\n\n      callback(details);\n\n      lastScrollY = scrollY;\n      scrolled = false;\n    }\n\n    function handleScroll() {\n      if (!scrolled) {\n        scrolled = true;\n        rafId = requestAnimationFrame(update);\n      }\n    }\n\n    var eventOptions = isPassiveSupported\n      ? { passive: true, capture: false }\n      : false;\n\n    element.addEventListener(\"scroll\", handleScroll, eventOptions);\n    update();\n\n    return {\n      destroy: function() {\n        cancelAnimationFrame(rafId);\n        element.removeEventListener(\"scroll\", handleScroll, eventOptions);\n      }\n    };\n  }\n\n  return trackScroll;\n});\n"]}